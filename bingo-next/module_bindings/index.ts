// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddBingoFieldDefinition } from "./add_bingo_field_definition_reducer.ts";
export { AddBingoFieldDefinition };
import { AuthenticateClient } from "./authenticate_client_reducer.ts";
export { AuthenticateClient };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { CreateGameSession } from "./create_game_session_reducer.ts";
export { CreateGameSession };
import { MarkField } from "./mark_field_reducer.ts";
export { MarkField };
import { RequestNewBingoCard } from "./request_new_bingo_card_reducer.ts";
export { RequestNewBingoCard };
import { ResetAllFieldStates } from "./reset_all_field_states_reducer.ts";
export { ResetAllFieldStates };
import { SendMessage } from "./send_message_reducer.ts";
export { SendMessage };
import { SendSystemMessage } from "./send_system_message_reducer.ts";
export { SendSystemMessage };
import { SetName } from "./set_name_reducer.ts";
export { SetName };

// Import and reexport all table handle types
import { BingoFieldDefinitionsTableHandle } from "./bingo_field_definitions_table.ts";
export { BingoFieldDefinitionsTableHandle };
import { GameSessionsTableHandle } from "./game_sessions_table.ts";
export { GameSessionsTableHandle };
import { PlayerBingoCardsTableHandle } from "./player_bingo_cards_table.ts";
export { PlayerBingoCardsTableHandle };
import { ActiveConnectionTableHandle } from "./active_connection_table.ts";
export { ActiveConnectionTableHandle };
import { MessageTableHandle } from "./message_table.ts";
export { MessageTableHandle };
import { SystemMessageTableHandle } from "./system_message_table.ts";
export { SystemMessageTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { ActiveConnection } from "./active_connection_type.ts";
export { ActiveConnection };
import { BingoFieldDefinition } from "./bingo_field_definition_type.ts";
export { BingoFieldDefinition };
import { GameSession } from "./game_session_type.ts";
export { GameSession };
import { Message } from "./message_type.ts";
export { Message };
import { PlayerBingoCard } from "./player_bingo_card_type.ts";
export { PlayerBingoCard };
import { SystemMessage } from "./system_message_type.ts";
export { SystemMessage };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    BingoFieldDefinitions: {
      tableName: "BingoFieldDefinitions",
      rowType: BingoFieldDefinition.getTypeScriptAlgebraicType(),
      primaryKey: "fieldId",
    },
    GameSessions: {
      tableName: "GameSessions",
      rowType: GameSession.getTypeScriptAlgebraicType(),
      primaryKey: "gameId",
    },
    PlayerBingoCards: {
      tableName: "PlayerBingoCards",
      rowType: PlayerBingoCard.getTypeScriptAlgebraicType(),
      primaryKey: "cardId",
    },
    active_connection: {
      tableName: "active_connection",
      rowType: ActiveConnection.getTypeScriptAlgebraicType(),
      primaryKey: "connectionIdentity",
    },
    message: {
      tableName: "message",
      rowType: Message.getTypeScriptAlgebraicType(),
      primaryKey: "messageId",
    },
    system_message: {
      tableName: "system_message",
      rowType: SystemMessage.getTypeScriptAlgebraicType(),
      primaryKey: "messageId",
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "steamId",
    },
  },
  reducers: {
    AddBingoFieldDefinition: {
      reducerName: "AddBingoFieldDefinition",
      argsType: AddBingoFieldDefinition.getTypeScriptAlgebraicType(),
    },
    AuthenticateClient: {
      reducerName: "AuthenticateClient",
      argsType: AuthenticateClient.getTypeScriptAlgebraicType(),
    },
    ClientConnected: {
      reducerName: "ClientConnected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    ClientDisconnected: {
      reducerName: "ClientDisconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    CreateGameSession: {
      reducerName: "CreateGameSession",
      argsType: CreateGameSession.getTypeScriptAlgebraicType(),
    },
    MarkField: {
      reducerName: "MarkField",
      argsType: MarkField.getTypeScriptAlgebraicType(),
    },
    RequestNewBingoCard: {
      reducerName: "RequestNewBingoCard",
      argsType: RequestNewBingoCard.getTypeScriptAlgebraicType(),
    },
    ResetAllFieldStates: {
      reducerName: "ResetAllFieldStates",
      argsType: ResetAllFieldStates.getTypeScriptAlgebraicType(),
    },
    SendMessage: {
      reducerName: "SendMessage",
      argsType: SendMessage.getTypeScriptAlgebraicType(),
    },
    SendSystemMessage: {
      reducerName: "SendSystemMessage",
      argsType: SendSystemMessage.getTypeScriptAlgebraicType(),
    },
    SetName: {
      reducerName: "SetName",
      argsType: SetName.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddBingoFieldDefinition", args: AddBingoFieldDefinition }
| { name: "AuthenticateClient", args: AuthenticateClient }
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "CreateGameSession", args: CreateGameSession }
| { name: "MarkField", args: MarkField }
| { name: "RequestNewBingoCard", args: RequestNewBingoCard }
| { name: "ResetAllFieldStates", args: ResetAllFieldStates }
| { name: "SendMessage", args: SendMessage }
| { name: "SendSystemMessage", args: SendSystemMessage }
| { name: "SetName", args: SetName }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addBingoFieldDefinition(text: string) {
    const __args = { text };
    let __writer = new BinaryWriter(1024);
    AddBingoFieldDefinition.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddBingoFieldDefinition", __argsBuffer, this.setCallReducerFlags.addBingoFieldDefinitionFlags);
  }

  onAddBingoFieldDefinition(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.onReducer("AddBingoFieldDefinition", callback);
  }

  removeOnAddBingoFieldDefinition(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.offReducer("AddBingoFieldDefinition", callback);
  }

  authenticateClient(steamId: string, steamUsername: string | undefined) {
    const __args = { steamId, steamUsername };
    let __writer = new BinaryWriter(1024);
    AuthenticateClient.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AuthenticateClient", __argsBuffer, this.setCallReducerFlags.authenticateClientFlags);
  }

  onAuthenticateClient(callback: (ctx: ReducerEventContext, steamId: string, steamUsername: string | undefined) => void) {
    this.connection.onReducer("AuthenticateClient", callback);
  }

  removeOnAuthenticateClient(callback: (ctx: ReducerEventContext, steamId: string, steamUsername: string | undefined) => void) {
    this.connection.offReducer("AuthenticateClient", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientConnected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientConnected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientDisconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientDisconnected", callback);
  }

  createGameSession(gameName: string | undefined, availableFieldIdsForGame: number[] | undefined) {
    const __args = { gameName, availableFieldIdsForGame };
    let __writer = new BinaryWriter(1024);
    CreateGameSession.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CreateGameSession", __argsBuffer, this.setCallReducerFlags.createGameSessionFlags);
  }

  onCreateGameSession(callback: (ctx: ReducerEventContext, gameName: string | undefined, availableFieldIdsForGame: number[] | undefined) => void) {
    this.connection.onReducer("CreateGameSession", callback);
  }

  removeOnCreateGameSession(callback: (ctx: ReducerEventContext, gameName: string | undefined, availableFieldIdsForGame: number[] | undefined) => void) {
    this.connection.offReducer("CreateGameSession", callback);
  }

  markField(gameId: number, fieldIdToMark: number) {
    const __args = { gameId, fieldIdToMark };
    let __writer = new BinaryWriter(1024);
    MarkField.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("MarkField", __argsBuffer, this.setCallReducerFlags.markFieldFlags);
  }

  onMarkField(callback: (ctx: ReducerEventContext, gameId: number, fieldIdToMark: number) => void) {
    this.connection.onReducer("MarkField", callback);
  }

  removeOnMarkField(callback: (ctx: ReducerEventContext, gameId: number, fieldIdToMark: number) => void) {
    this.connection.offReducer("MarkField", callback);
  }

  requestNewBingoCard(gameId: number) {
    const __args = { gameId };
    let __writer = new BinaryWriter(1024);
    RequestNewBingoCard.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("RequestNewBingoCard", __argsBuffer, this.setCallReducerFlags.requestNewBingoCardFlags);
  }

  onRequestNewBingoCard(callback: (ctx: ReducerEventContext, gameId: number) => void) {
    this.connection.onReducer("RequestNewBingoCard", callback);
  }

  removeOnRequestNewBingoCard(callback: (ctx: ReducerEventContext, gameId: number) => void) {
    this.connection.offReducer("RequestNewBingoCard", callback);
  }

  resetAllFieldStates() {
    this.connection.callReducer("ResetAllFieldStates", new Uint8Array(0), this.setCallReducerFlags.resetAllFieldStatesFlags);
  }

  onResetAllFieldStates(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ResetAllFieldStates", callback);
  }

  removeOnResetAllFieldStates(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ResetAllFieldStates", callback);
  }

  sendMessage(text: string) {
    const __args = { text };
    let __writer = new BinaryWriter(1024);
    SendMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SendMessage", __argsBuffer, this.setCallReducerFlags.sendMessageFlags);
  }

  onSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.onReducer("SendMessage", callback);
  }

  removeOnSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.offReducer("SendMessage", callback);
  }

  sendSystemMessage(messageText: string) {
    const __args = { messageText };
    let __writer = new BinaryWriter(1024);
    SendSystemMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SendSystemMessage", __argsBuffer, this.setCallReducerFlags.sendSystemMessageFlags);
  }

  onSendSystemMessage(callback: (ctx: ReducerEventContext, messageText: string) => void) {
    this.connection.onReducer("SendSystemMessage", callback);
  }

  removeOnSendSystemMessage(callback: (ctx: ReducerEventContext, messageText: string) => void) {
    this.connection.offReducer("SendSystemMessage", callback);
  }

  setName(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    SetName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SetName", __argsBuffer, this.setCallReducerFlags.setNameFlags);
  }

  onSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("SetName", callback);
  }

  removeOnSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("SetName", callback);
  }

}

export class SetReducerFlags {
  addBingoFieldDefinitionFlags: CallReducerFlags = 'FullUpdate';
  addBingoFieldDefinition(flags: CallReducerFlags) {
    this.addBingoFieldDefinitionFlags = flags;
  }

  authenticateClientFlags: CallReducerFlags = 'FullUpdate';
  authenticateClient(flags: CallReducerFlags) {
    this.authenticateClientFlags = flags;
  }

  createGameSessionFlags: CallReducerFlags = 'FullUpdate';
  createGameSession(flags: CallReducerFlags) {
    this.createGameSessionFlags = flags;
  }

  markFieldFlags: CallReducerFlags = 'FullUpdate';
  markField(flags: CallReducerFlags) {
    this.markFieldFlags = flags;
  }

  requestNewBingoCardFlags: CallReducerFlags = 'FullUpdate';
  requestNewBingoCard(flags: CallReducerFlags) {
    this.requestNewBingoCardFlags = flags;
  }

  resetAllFieldStatesFlags: CallReducerFlags = 'FullUpdate';
  resetAllFieldStates(flags: CallReducerFlags) {
    this.resetAllFieldStatesFlags = flags;
  }

  sendMessageFlags: CallReducerFlags = 'FullUpdate';
  sendMessage(flags: CallReducerFlags) {
    this.sendMessageFlags = flags;
  }

  sendSystemMessageFlags: CallReducerFlags = 'FullUpdate';
  sendSystemMessage(flags: CallReducerFlags) {
    this.sendSystemMessageFlags = flags;
  }

  setNameFlags: CallReducerFlags = 'FullUpdate';
  setName(flags: CallReducerFlags) {
    this.setNameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get bingoFieldDefinitions(): BingoFieldDefinitionsTableHandle {
    return new BingoFieldDefinitionsTableHandle(this.connection.clientCache.getOrCreateTable<BingoFieldDefinition>(REMOTE_MODULE.tables.BingoFieldDefinitions));
  }

  get gameSessions(): GameSessionsTableHandle {
    return new GameSessionsTableHandle(this.connection.clientCache.getOrCreateTable<GameSession>(REMOTE_MODULE.tables.GameSessions));
  }

  get playerBingoCards(): PlayerBingoCardsTableHandle {
    return new PlayerBingoCardsTableHandle(this.connection.clientCache.getOrCreateTable<PlayerBingoCard>(REMOTE_MODULE.tables.PlayerBingoCards));
  }

  get activeConnection(): ActiveConnectionTableHandle {
    return new ActiveConnectionTableHandle(this.connection.clientCache.getOrCreateTable<ActiveConnection>(REMOTE_MODULE.tables.active_connection));
  }

  get message(): MessageTableHandle {
    return new MessageTableHandle(this.connection.clientCache.getOrCreateTable<Message>(REMOTE_MODULE.tables.message));
  }

  get systemMessage(): SystemMessageTableHandle {
    return new SystemMessageTableHandle(this.connection.clientCache.getOrCreateTable<SystemMessage>(REMOTE_MODULE.tables.system_message));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
